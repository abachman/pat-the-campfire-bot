// Generated by CoffeeScript 1.8.0
(function() {
  var SpeakOnce, echo_matcher, qs, spoken_messages, util;

  util = require('util');

  SpeakOnce = require('../vendor/speak_once').SpeakOnce;

  qs = require('querystring');

  echo_matcher = /^!echo\b(.*)/i;

  spoken_messages = {};

  module.exports = {
    name: "echo",
    http_listen: function(request, response, logger) {
      var data;
      if (/\/say/i.test(request.url)) {
        if (/post/i.test(request.method)) {
          data = "";
          request.on('data', function(incoming) {
            return data += incoming;
          });
          return request.on('end', function() {
            var date, full_data, message, room_number, speak_callback;
            console.log("[echo] recieved POST " + data);
            full_data = qs.parse(data);
            message = full_data.message;
            room_number = full_data.room != null ? full_data.room : null;
            console.log("[echo] recieved data (" + (typeof full_data) + "): " + (util.inspect(full_data)));
            console.log("[echo] recieved message (" + (typeof message) + "): " + message);
            response.writeHead(200, {
              'Content-Type': 'text/plain'
            });
            date = new Date;
            if (spoken_messages[message] && date - spoken_messages[message] < 30000) {
              console.log("[echo] attempted to repost message before time expired: BLOCKED");
            } else {
              speak_callback = function(room) {
                return room.speak(message, logger);
              };
              if (room_number != null) {
                new SpeakOnce(room_number, speak_callback);
              } else {
                new SpeakOnce(speak_callback);
              }
              spoken_messages[message] = date;
            }
            return response.end('');
          });
        }
      }
    },
    listen: function(message, room, logger) {
      var body;
      body = message.body;
      if (echo_matcher.test(body)) {
        console.log("echoing");
        return room.speak(echo_matcher.exec(body)[1], logger);
      }
    }
  };

}).call(this);
