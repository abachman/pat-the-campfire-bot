// Generated by CoffeeScript 1.3.3
(function() {
  var curl, qs, util, wikipedia_host, _;

  util = require('util');

  _ = require('underscore')._;

  qs = require('querystring');

  curl = require('../vendor/simple_http').curl;

  wikipedia_host = 'en.wikipedia.org';

  module.exports = {
    name: "Wikipedia",
    listen: function(message, room, logger) {
      var body, options, phrase;
      body = message.body;
      if (/pat/i.test(body) && /look up:/i.test(body)) {
        phrase = body.match(/: (.*)$/);
        if (!(phrase && phrase[1].length)) {
          room.speak("I can't tell what you want me to look up :(", logger);
          return;
        }
        phrase = phrase[1];
        console.log("looking up \"" + phrase + "\" on wikipedia");
        options = {
          host: wikipedia_host,
          path: "/w/api.php",
          params: {
            action: 'query',
            format: 'json',
            prop: 'extracts',
            exintro: true,
            explaintext: true,
            titles: phrase
          }
        };
        console.log("hitting wikipedia with params: " + (qs.stringify(options.params)));
        return curl(options, function(data) {
          var content, out, page, results, wikiUrl, _ref, _results;
          console.log("RAW RESPONSE:");
          console.log(data);
          try {
            results = JSON.parse(data);
            out = "";
            console.log("got pages " + JSON.stringify(results.query.pages));
            _ref = results.query.pages;
            _results = [];
            for (page in _ref) {
              content = _ref[page];
              console.log("got response on page " + page);
              console.log(util.inspect(content));
              if (content.extract != null) {
                room.speak(content.extract, logger);
                wikiUrl = "http://" + wikipedia_host + "/wiki/" + (qs.escape(content.title.replace(' ', '_')));
                room.speak(wikiUrl);
              }
              if (content.invalid != null) {
                throw "Wikipedia didn't know how to handle that one :(";
              } else {
                _results.push(void 0);
              }
            }
            return _results;
          } catch (e) {
            return room.speak("there was a problem :( \"" + e.message + "\"", logger);
          }
        });
      }
    }
  };

}).call(this);
