// Generated by CoffeeScript 1.3.3
(function() {
  var IS_LISTENING, SpeakOnce, curl, getClientIp, qs, util, _, _ref;

  util = require('util');

  _ref = require('../vendor/simple_http'), curl = _ref.curl, getClientIp = _ref.getClientIp;

  SpeakOnce = require('../vendor/speak_once').SpeakOnce;

  _ = require('underscore')._;

  qs = require('querystring');

  IS_LISTENING = false;

  module.exports = {
    name: "Webhook Inspector",
    http_listen: function(request, response, logger) {
      var clientIp, data;
      if (/\/webhook-inspector/i.test(request.url)) {
        clientIp = getClientIp(request);
        console.log("/webhook-inspector got a " + request.method + " message from " + clientIp);
        response.writeHead(200, {
          'Content-Type': 'text/html'
        });
        response.end(IS_LISTENING ? "okay " + clientIp : "la la la, I'm not listening");
        if (!IS_LISTENING) {
          return;
        }
        data = "";
        request.on('data', function(incoming) {
          return data += incoming;
        });
        return request.on('end', function() {
          return new SpeakOnce(function(room) {
            if (data.length > 0) {
              room.speak("I received a " + request.method + " request on " + request.headers.host + request.url + " from " + clientIp + ", it is " + data.length + " bytes.", logger);
              return room.paste(data, logger);
            }
          });
        });
      }
    },
    listen: function(message, room, logger) {
      var body, mah_name, matcher, state;
      body = message.body;
      mah_name = /pat/i;
      matcher = /(start|stop) inspecting webhooks/i;
      if (mah_name.test(body) && matcher.test(body)) {
        state = matcher.exec(body)[1];
        if (/start/i.test(state)) {
          room.speak("I'm inspecting webhooks " + (IS_LISTENING ? 'already' : 'now') + ".");
          return IS_LISTENING = true;
        } else {
          room.speak("I've stopped inspecting webhooks " + (!IS_LISTENING ? 'already' : 'now') + ".");
          return IS_LISTENING = false;
        }
      }
    }
  };

}).call(this);
