// Generated by CoffeeScript 1.6.2
(function() {
  var EXCUSES, Excuse, SpeakOnce, qs, util, _;

  util = require('util');

  SpeakOnce = require('../vendor/speak_once').SpeakOnce;

  qs = require('querystring');

  _ = require('underscore')._;

  EXCUSES = [["What ya got there's", "Sounds like", "Could be", "Might be", "It may be", "It's likely to be", "I'm afraid it's", "Look out for", "This sounds like", "Your problem is", "Could be user error, could also be"], ['Multiplexed', 'Intermittant', 'Synchronous', 'Unreplicatable', 'Asynchronous', 'Resignalled', 'Extraneous', 'Dereferenced', 'Redundant'], ['Registry', 'Configuration', 'Systems', 'Hardware', 'Software', 'Firmware', 'Backplane', 'Transmission', 'Reception'], ['Interruption', 'Dereferencing', 'Reclock', 'Incompatibility', 'Stackdump', 'Lockout', 'Override', 'Invalidation', 'Desynchronisation'], ['Condition', 'Error', 'Problem', 'Warning', 'Signal', 'Flag', 'Malfunction', 'Failure', 'Indication']];

  Excuse = (function() {
    function Excuse() {}

    Excuse.prototype.generate = function() {
      var init, rest;

      init = _.first(_.shuffle(EXCUSES[0]));
      rest = _.map(EXCUSES.slice(1), function(subList) {
        return _.first(_.shuffle(subList));
      }).join(' ');
      if (/^[aeiou]/i.test(rest)) {
        init += ' an ';
      } else {
        init += ' a ';
      }
      return init + rest;
    };

    return Excuse;

  })();

  module.exports = {
    name: "excuses",
    http_listen: function(request, response, logger) {
      if (/\/excuse$/i.test(request.url)) {
        console.log("generating excuse");
        response.writeHead(200, {
          'Content-Type': 'text/plain'
        });
        response.end((new Excuse).generate());
        return console.log("DONE!");
      }
    },
    listen: function(message, room, logger) {
      var body;

      body = message.body;
      if (/pat/i.test(body) && (/an excuse/i.test(body) || /the excuse/i.test(body) || /my excuse/i.test(body) || /our excuse/i.test(body) || /some excuse/i.test(body))) {
        console.log("generating excuse");
        return room.speak((new Excuse).generate(), logger);
      }
    }
  };

}).call(this);
