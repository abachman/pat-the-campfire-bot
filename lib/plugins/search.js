// Generated by CoffeeScript 1.6.2
(function() {
  var Google, extract_params, formatted_result, google, logger, unescape, _;

  Google = require('../vendor/google');

  unescape = require('../vendor/unescape');

  _ = require('underscore');

  google = new Google();

  logger = function(d) {
    var e;

    try {
      return console.log("" + d.message.created_at + ": " + d.message.body);
    } catch (_error) {
      e = _error;
      return console.log(d);
    }
  };

  extract_params = function(param) {
    var arg_exp, count, query;

    arg_exp = /\+[0-9]+/;
    if (arg_exp.test(param)) {
      count = arg_exp.exec(param)[0];
      count = count.replace('+', '');
      count = parseInt(count);
    } else {
      count = 1;
    }
    query = param.replace(arg_exp, '');
    return {
      count: count,
      query: query
    };
  };

  formatted_result = function(result) {
    var buffer;

    buffer = new Buffer("" + result.titleNoFormatting + " :: " + result.unescapedUrl, "ascii");
    return buffer.toString().replace('â€“', '-');
  };

  module.exports = {
    name: "Search",
    listen: function(msg, room, env) {
      var count, g_exp, jq_exp, mdc_exp, param, query, w_exp, yt_exp, _ref;

      g_exp = /^!g\s+([^#@]+)?$/;
      mdc_exp = /^!mdc ([^#@]+)(?:\s*#([1-9]))?$/;
      yt_exp = /^!yt ([^#@]+)(?:\s*#([1-9]))?$/;
      jq_exp = /^!jq ([^#@]+)(?:\s*#([1-9]))?$/;
      w_exp = /^!w(eather)? ([^#@]+)(?:\s*#([1-9]))?$/;
      if (g_exp.test(msg.body)) {
        param = g_exp.exec(msg.body)[1];
        _ref = extract_params(param), count = _ref.count, query = _ref.query;
        google.search(query, function(results) {
          var n, out, _i, _ref1;

          if (results.length) {
            console.log("GOT RESULTS!");
            console.dir(results);
            if (count > 1 && results.length >= count) {
              out = [];
              for (n = _i = 0, _ref1 = count - 1; 0 <= _ref1 ? _i <= _ref1 : _i >= _ref1; n = 0 <= _ref1 ? ++_i : --_i) {
                out.push(formatted_result(results[n]));
              }
              console.log("returning:");
              console.log('----');
              console.log(out.join("\n"));
              console.log('----');
              return room.paste(out.join("\n"), logger);
            } else {
              return room.speak(formatted_result(results[0]), logger);
            }
          } else {
            return room.speak("Sorry, no results for \"" + param + "\"", logger);
          }
        });
      }
      if (jq_exp.test(msg.body)) {
        param = msg.body.match(jq_exp)[1] + ' site:api.jquery.com';
        google.search(param, function(results) {
          if (results.length) {
            return room.speak(formatted_result(results[0]), logger);
          } else {
            return room.speak("Sorry, no results for \"" + param + "\"", logger);
          }
        });
      }
      if (mdc_exp.test(msg.body)) {
        param = msg.body.match(mdc_exp)[1] + ' site:developer.mozilla.org';
        google.search(param, function(results) {
          if (results.length) {
            return room.speak(formatted_result(results[0]), logger);
          } else {
            return room.speak("Sorry, no results for \"" + param + "\"", logger);
          }
        });
      }
      if (yt_exp.test(msg.body)) {
        param = msg.body.match(yt_exp)[1] + ' site:youtube.com';
        google.search(param, function(results) {
          if (results.length) {
            return room.speak("" + results[0].unescapedUrl, logger);
          } else {
            return room.speak("Sorry, no results for \"" + param + "\"", logger);
          }
        });
      }
      if (w_exp.test(msg.body)) {
        param = msg.body.match(w_exp)[2];
        console.log("[Search] sending " + param + " to google api");
        return google.weather(param, function(results) {
          var weather_template;

          if (results.city.length > 0) {
            weather_template = "weather for " + results.city + ": " + results.condition + ", " + results.temp_f + " F / " + results.temp_c + " C, " + results.humidity;
            console.log("returning: '" + weather_template + "'");
            return room.speak(weather_template, logger);
          } else {
            return room.speak("Sorry, no results for \"" + param + "\"", logger);
          }
        });
      }
    }
  };

}).call(this);
